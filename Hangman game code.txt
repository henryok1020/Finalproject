{\rtf1\ansi\ansicpg949\cocoartf2512
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red191\green100\blue38;\red32\green32\blue32;\red153\green168\blue186;
\red109\green109\blue109;\red117\green114\blue185;\red88\green118\blue71;\red86\green132\blue173;\red254\green187\blue91;
}
{\*\expandedcolortbl;;\csgenericrgb\c74902\c39216\c14902;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c60000\c65882\c72941;
\csgenericrgb\c42745\c42745\c42745;\csgenericrgb\c45882\c44706\c72549;\csgenericrgb\c34510\c46275\c27843;\csgenericrgb\c33725\c51765\c67843;\csgenericrgb\c99608\c73333\c35686;
}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 import \cf4 random   \cf5 # For number generation\
\cf2 import \cf4 re       \cf5 # For regular expression functionality\
\
# Game setup\
\cf6 print\cf4 (\cf7 "Welcome to Hangman!"\cf4 )\
\cf6 print\cf4 (\cf7 "There are multiple difficulty settings shown below:"\cf4 )\
\cf6 print\cf4 (\cf7 "\cf2 \\t\cf7 1. Beginner (15 lives)"\cf4 )\
\cf6 print\cf4 (\cf7 "\cf2 \\t\cf7 2. Intermediate (10 lives)"\cf4 )\
\cf6 print\cf4 (\cf7 "\cf2 \\t\cf7 3. Expert (8 lives)"\cf4 )\
\cf6 print\cf4 (\cf7 "\cf2 \\t\cf7 4. Advanced (5 lives)"\cf4 )\
\cf6 print\cf4 (\cf7 "\cf2 \\t\cf7 5. Insane (3 lives)"\cf4 )\
\
\cf5 # Choose a difficulty level\
\cf4 user_setting = \cf6 input\cf4 (\cf7 "Please choose a difficulty by typing its number: "\cf4 )\
\
\cf5 # Establish a list of words that can be chosen for the game\
\cf2 with \cf6 open\cf4 (\cf7 "/Users/henry/Desktop/python/myGuessWords.txt"\cf4 ) \cf2 as \cf4 f:\
    word_list = f.read().splitlines()\
\
\cf5 # Inform the user of their selection\
\cf2 if \cf4 (\cf6 str\cf4 (user_setting) == \cf7 "1"\cf4 ):\
    number_of_lives = \cf8 15\
    \cf6 print\cf4 (\cf7 "\cf2 \\n\cf7 You have chosen %s and will receive %d lives." \cf4 % (\cf7 "Beginner"\cf2 , \cf4 number_of_lives))\
\cf2 elif \cf4 (\cf6 str\cf4 (user_setting) == \cf7 "2"\cf4 ):\
    number_of_lives = \cf8 10\
    \cf6 print\cf4 (\cf7 "\cf2 \\n\cf7 You have chosen %s and will receive %d lives." \cf4 % (\cf7 "Intermediate"\cf2 , \cf4 number_of_lives))\
\cf2 elif \cf4 (\cf6 str\cf4 (user_setting) == \cf7 "3"\cf4 ):\
    number_of_lives = \cf8 8\
    \cf6 print\cf4 (\cf7 "\cf2 \\n\cf7 You have chosen %s and will receive %d lives." \cf4 % (\cf7 "Expert"\cf2 , \cf4 number_of_lives))\
\cf2 elif \cf4 (\cf6 str\cf4 (user_setting) == \cf7 "4"\cf4 ):\
    number_of_lives = \cf8 5\
    \cf6 print\cf4 (\cf7 "\cf2 \\n\cf7 You have chosen %s and will receive %d lives." \cf4 % (\cf7 "Advanced"\cf2 , \cf4 number_of_lives))\
\cf2 elif \cf4 (\cf6 str\cf4 (user_setting) == \cf7 "5"\cf4 ):\
    number_of_lives = \cf8 3\
    \cf6 print\cf4 (\cf7 "\cf2 \\n\cf7 You have chosen %s and will receive %d lives." \cf4 % (\cf7 "Insane"\cf2 , \cf4 number_of_lives))\
\cf2 else\cf4 :\
    number_of_lives = \cf8 15\
    \cf6 print\cf4 (\cf7 "\cf2 \\n\cf7 You have made an invalid selection and will receive %d lives by default." \cf4 % number_of_lives)\
\
\cf5 # Pick a random word from the list\
\cf4 random_num = random.randint(\cf8 0\cf2 , \cf6 len\cf4 (word_list)-\cf8 1\cf4 )\
word_chosen = word_list[random_num]\
\
\cf5 # Encode the word with dashes\
\cf4 encoded_word = re.sub(\cf7 '[0-9a-zA-Z]'\cf2 , \cf7 '-'\cf2 , \cf4 word_chosen)\
\
\cf5 # Define a function for handling guesses\
\cf2 def \cf9 guess\cf4 (letter\cf2 , \cf4 word\cf2 , \cf4 encoded):\
    \cf5 # Does the letter exist within the word?\
    \cf4 found = \cf2 False\
    if \cf4 letter \cf2 in \cf4 word:\
        found = \cf2 True\
        \cf5 # Replace the dashes with the letter\
        \cf2 for \cf4 i \cf2 in \cf6 range\cf4 (\cf8 0\cf2 , \cf6 len\cf4 (word)):\
            \cf2 if \cf4 word[i] == letter:\
                encoded = encoded[\cf8 0\cf4 :i] + letter + encoded[i+\cf8 1\cf4 :\cf6 len\cf4 (encoded)]\
    \cf2 return \cf4 (found\cf2 , \cf4 encoded)\
\
\
\cf5 # Initiate the game and prompt the user for their first selection\
\cf6 print\cf4 (\cf7 "\cf2 \\n\cf7 Time to guess a letter! You have %d lives remaining." \cf4 % number_of_lives)\
\cf6 print\cf4 (encoded_word)\
\
\cf2 while\cf4 (number_of_lives > \cf8 0\cf4 ):\
    guessed_letter = \cf6 input\cf4 (\cf7 "Your guess: "\cf4 )[:\cf8 1\cf4 ]\
\
    letter_found\cf2 , \cf4 encoded_word = guess(guessed_letter\cf2 , \cf4 word_chosen\cf2 , \cf4 encoded_word)\
\
    \cf2 if not \cf4 letter_found:\
        number_of_lives -= \cf8 1\
        \cf2 if \cf4 number_of_lives == \cf8 0\cf4 :\
            \cf6 print\cf4 (\cf7 "\cf2 \\n\cf7 <%s> \cf2 \\n\cf7 game lost!" \cf4 % word_chosen)\
            \cf2 break\
        else\cf4 :\
            \cf6 print\cf4 (\cf7 "\cf2 \\n\cf7 Whoops! That letter was not found. You now have %d lives remaining." \cf4 % number_of_lives)\
            \cf6 print\cf4 (encoded_word)\
    \cf2 else\cf4 :\
        \cf2 if \cf7 "-" \cf2 not in \cf4 encoded_word:\
            \cf6 print\cf4 (\cf7 "\cf2 \\n\cf7 <%s>  \cf2 \\n\cf7 game won!" \cf4 % word_chosen)\
            \cf2 break\
        else\cf4 :\
            \cf6 print\cf4 (\cf7 "\cf2 \\n\cf7 Good job! That letter was found. You still have %d lives remaining." \cf4 % number_of_lives)\
            \cf6 print\cf4 (encoded_word)\
}